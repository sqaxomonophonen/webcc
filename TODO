
 codegen.c => WASM!

 optimizations?
 - surprise: chibicc doesn't do constant folding? i.e. `return 10*20;` will
   generate code that multiplies 10 with 20. this is surprising because `int
   xs[10*20];` actually works properly; it calculates the size of xs[] at
   compile-time. see also: test/constexpr.c
 - switch/case? analyse cases and choose a strategy? (or several?) like: simple
   if/else; jump tables; binary search if/else? the self-hosted compiler could
   benefit from this.


hodgepodge description:
 - fork of chibicc
 - replaces x86 codegen with WASM codegen
 - no WASI/libc dependency
 - command-line nodejs version
 - no file system, system headers (angle-bracket includes, see include/*)
   inlined, user headers (double quoted) provided by caller?
 - scratch allocator


more:


 - build.bash should accept "any" compiler...? there's currently a bit of
   combinatorial explosion going on because I'd like to build:
     webcc.wasm
     unittest.wasm
     selftest.wasm, based on test/*.. or one .wasm per test?
   and each should be compilable using:
     clang
     clang-built webcc(0)
     webcc(0)-built webcc(1)
     webcc(1)-built webcc(2)
     etc
   maybe I should also be able to set the artifact name so that I can build
   webcc0.wasm, webcc1.wasm, etc...
   this is also further complicated by annoying inconsistencies in clang
   toolchain naming; I use clang19/wasm-ld on FreeBSD, clang-16/wasm-ld-16 on
   Debian,... :-/
   also even further complicated by native builds (relavant for both webcc and
   unittest?)


 - build.bash parallel builds? there are few enough files that I don't need a
   process pool (max concurrency)? :) NOTE I may want to avoid doing
   incremental builds unless .o files are also tagged with the compiler
   version. otherwise foo.c will compile to foo.o regardless of target
   (wasm32/native) and compiler used (clang/webcc(0)/webcc(1)/...)


 - wasm/self-hosted unit tests (and tests in general?); right now they only run
   natively. NOTE this should probably support both clang and webcc WASM
   builds. clang builds test against platform differences (like 4-vs-8 byte
   pointers), while webcc builds also test for webcc/chibicc compiler bugs.


 - stability/stage tests? the idea is to repeatedly build webcc:
    webcc(0) built with clang
    webcc(1) built with webcc(0)
    webcc(2) built with webcc(1)
    etc.
   I expect the file hashes of webcc(1+) to be the same, but if something
   subtle/fishy is going on (like reordering) it might not? if only webcc(2+)
   is stable then the subtleties are harmless? in any case it's good to know?

